/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     set<int>s;
    vector<TreeNode*>ans;
    void call(TreeNode* r,int i,TreeNode*parent,int val)
    {
        if(!r)return;
        if(s.find(r->val)!=s.end())
        {
            TreeNode *ri=r->right;
            TreeNode *le=r->left;
            if(val==0&&parent)
            {
                parent->left=NULL;
            }
            else if(val==1&&parent)
            {
                parent->right=NULL;
            }
            if(!ri&&!le)return ;
            call(ri,0,NULL,1);
            call(le,0,NULL,0);
        }
        else
        {
        if(i==0)
            ans.push_back(r);
        call(r->right,i+1,r,1);
        call(r->left,i+1,r,0);
        }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to) {
        
        for(auto i:to)
            s.insert(i);
         call(root,0,NULL,-1);
        return ans;
    }
};
