/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans=0;
    
    vector<int> call(TreeNode* r, int d)
    {
        if(!r)return {};
        if(!r->left&&!r->right)return {1};
        vector<int>le=call(r->left,d);
        vector<int>ri=call(r->right,d);
        vector<int>re;
        for(int i=0;i<le.size();i++)
        {
            for(int j=0;j<ri.size();j++)
                if(le[i]+ri[j]<=d)
                    ans++;
            if(le[i]<d)
                re.push_back(le[i]+1);
        }
        for(int j=0;j<ri.size();j++)
            if(ri[j]<d)
                re.push_back(ri[j]+1);
        return re;
    }
    int countPairs(TreeNode* r, int d) {
        if(!r||!r->left&&!r->right)return 0;
        
        call(r,d);
        return ans;
    }
};
