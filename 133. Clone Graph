/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    unordered_map<int,Node*>m;
 
    Node* cloneGraph(Node* node) {
        if(!node)return {};
        int val=node->val;
        
        if(m.find(val)!=m.end())return m[val];
        
        vector<Node*>vec;
        vector<Node*>v=node->neighbors;
        
        Node* n=new Node(val);
        
        m[val]=n;
        for(int i=0;i<v.size();i++)
        {
            Node* nu=cloneGraph(v[i]);
            vec.push_back(nu);
        }
            
        
        m[val]->neighbors=vec;
        return n;
    }
};
