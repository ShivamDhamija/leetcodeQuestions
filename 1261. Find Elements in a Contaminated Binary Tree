/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
    unordered_set<int>s;
    TreeNode *head;
    void call(TreeNode *r,int x)
    {
        if(!r)return ;
        r->val=x;
      //  s.insert(x);
        call(r->left,x*2+1);
        call(r->right,x*2+2);
    }
public:
    FindElements(TreeNode* root) {
        head=root;
        call(root,0);
    }
    
    bool find(int t) {
       // return s.find(t)!=s.end();
        int x=t,count=1;
        while(x)
        {
            x=x>>1;
            count++;
        }
        queue<TreeNode*>q;
        q.push(head);
        while(!q.empty()&&count)
        {
            int size=q.size();
            count--;
            while(size)
            {
                size--;
                TreeNode *temp=q.front();
                q.pop();
                if(temp->val==t)return true;
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
            }
        }
        return false;
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
