class Solution {
public:
    vector<int>parent;
    vector<int>height;
    int findParent(int n)
    {
         while(parent[n]!=n)
         {
             n=parent[n];
         }
       
        return n;
    }
    int findHeight(int n)
    {
        return height[n];
    }
    void doUnion(int i,int j)
    {
        int p1=findParent(i);
        int p2=findParent(j);
        
        int h1=findHeight(p1);
        int h2=findHeight(p2);
        
        if(h1>h2)
        {
            parent[p2]=p1;
        }
        else if(h2>h1)
        {
            parent[p1]=p2;
        }
        else
        {
            parent[p2]=p1;
            height[p1]++;
        }
    }
    int removeStones(vector<vector<int>>& s) {
        parent.resize(2e4+1);
        height.resize(2e4+1,1);
        for(int i=0;i<=2e4;i++)
            parent[i]=i;
        int ma=INT_MIN,mi=INT_MAX;
        for(auto i:s)
        {
            ma=max(ma,max(i[0],i[1]));
            mi=min(mi,min(i[0],i[1]));
            doUnion(i[0],1e4+1+i[1]);
        }
        unordered_set<int> se;
        for(auto i:s)
            se.insert(findParent(i[0]));
        return s.size()-se.size();
    }
};
