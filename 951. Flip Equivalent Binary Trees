/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool flipEquiv(TreeNode* r1, TreeNode* r2) {
        if(!r1&&!r2)return true;
        if(!r1||!r2)return false;
        if(r1->val!=r2->val)return false;
       // cout<<r1->val<<" "<<r2->val<<endl;
        if(r1->left&&r2->left&&r1->right&&r2->right)
        {
            int a=r1->left->val,b=r2->left->val;
            int x=r1->right->val,y=r2->right->val;
            
            if(a==b&&x==y)
                return flipEquiv(r1->left,r2->left)&&flipEquiv(r1->right,r2->right);
            else if(a==y&&x==b)
                return flipEquiv(r1->left,r2->right)&&flipEquiv(r1->right,r2->left);
            else
                return false;
        }
        else if(r1->left&&!r2->left&&!r1->right&&r2->right)
        {
            int a=r1->left->val;
            int y=r2->right->val;
            if(a!=y)return false;
            return flipEquiv(r1->left,r2->right);
        }
        else if(!r1->left&&r2->left&&r1->right&&!r2->right)
        {
            int b=r2->left->val;
            int x=r1->right->val;
            if(x!=b)return false;
            return flipEquiv(r2->left,r1->right);
        }
        else if(!r1->left&&!r2->left&&!r1->right&&!r2->right)
        {
            return true;
        }
        else if(!r1->left&&!r2->left&&r1->right&&r2->right)
        {
            return flipEquiv(r1->right,r2->right);
        }
        else if(r1->left&&r2->left&&!r1->right&&!r2->right)
        {
            return flipEquiv(r1->left,r2->left);
        }
        return false;
    }
};
