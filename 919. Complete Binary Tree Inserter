/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class CBTInserter {
public:
    queue<TreeNode*>q;
    TreeNode *head;
     
    void call(TreeNode *r)
    {
        if(!r)return ;
        queue<TreeNode*>q1;
        q1.push(r);
       while(!q1.empty())
       {
           TreeNode *f=q1.front();
           q1.pop();
           q.push(f);
           if(f->left)
               q1.push(f->left);
           if(f->right)
               q1.push(f->right);
           }
        while(!q.empty()&&q.front()->right&&q.front()->left)
               q.pop();
         
    }
    CBTInserter(TreeNode* root) {
        head=root;
        call(root);
    }
    
    int insert(int val) {
        TreeNode *f=q.front();
        TreeNode *ne=new TreeNode(val);
        
        if(f->left)
        {
            f->right=ne;
            q.pop();
        }
        else
        {
            f->left=ne;
        }
        q.push(ne);
        return f->val;
    }
    
    TreeNode* get_root() {
        return head;
    }
};

/**
 * Your CBTInserter object will be instantiated and called as such:
 * CBTInserter* obj = new CBTInserter(root);
 * int param_1 = obj->insert(val);
 * TreeNode* param_2 = obj->get_root();
 */
