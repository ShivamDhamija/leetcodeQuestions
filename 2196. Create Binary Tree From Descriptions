/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,TreeNode*>m;
    unordered_set<TreeNode*>s;
    TreeNode* createBinaryTree(vector<vector<int>>& d) {
        
        for(int i=0;i<d.size();i++)
        {
            int p=d[i][0],c=d[i][1],l=d[i][2];
            TreeNode *pa;
            TreeNode *ch;
            if(m.find(p)!=m.end())
                pa=m[p];
            else 
            {
                pa=new TreeNode(p);
                m[p]=pa;
                s.insert(pa);
            }
            if(m.find(c)!=m.end())
            {
                ch=m[c];
                if(s.find(ch)!=s.end())s.erase(ch);
            }
            else
            {
                ch=new TreeNode(c);
                m[c]=ch;
            }
            if(l)
                pa->left=ch;
            else
                pa->right=ch;
        }
        return s.begin()!=s.end()?*s.begin():NULL;
    }
};
